/* generated by writeJava methods in Workspace */
package com.Tuuyi.TMPDataModel.generatedClasses.TMPDataModel;

import com.Tuuyi.TDM.*;
import org.apache.log4j.Logger;
import java.util.*;
import java.lang.reflect.Method;
import org.json.*;
import java.util.concurrent.ConcurrentHashMap;

public class PropertySet extends DomainConcept {

  protected static final Logger logWriter = Logger.getLogger(PropertySet.class.getName());
  private static final boolean persistant = false;

  public void inMemoryOnly(boolean local) {inMemoryOnly = local;}
  public boolean getInMemoryOnly() {return inMemoryOnly;}
  public boolean isPersistant() {return persistant;}

  public static boolean isPersistantClass() {return persistant;}

  protected ArrayList<Property> hasProperties = new ArrayList<Property>(0);

  public void setHasPropertiesRawValueInternal(String rawVal) {
  }


  /** if no arg, assume from db **/
  public PropertySet() {
    this(true);
  }
  /** if from DB, set nonFunctional slot wrappers to stub **/
  /**    so subsequent slot get will do retrieval         **/
  public PropertySet(boolean fromDB) {
    super(Workspace.getCurrentWorkspace(), fromDB);
  }
  public PropertySet(Workspace workspace, boolean fromDB) {
    super(workspace, fromDB);
  }
  public boolean hasPropertiesAllResident() {
      return true;
  }

  /** returns true if this object contains the given object without accessing the database **/
  public boolean containsHasProperties(Property value) {
      return hasProperties.contains(value);
  }

  public ArrayList<Property> getHasProperties() {
      return hasProperties;
  }
  public int getId() {
    return id;
  }

  /** note that this method does not check for duplicates, which may cause a DB error */
  public void setHasProperties(Collection<Property> newHasProperties) {
    hasProperties=new ArrayList<Property>(newHasProperties);
  }

  public void add1HasProperties(Property newHasProperties) {
    hasProperties.add(newHasProperties);
  }

  /** note that this method does not check for duplicates, which may cause a DB error */
  public void addAllHasProperties(Collection<Property> newHasProperties) {
    hasProperties.addAll(newHasProperties);
  }

  public boolean remove1HasProperties(Property newHasProperties) {
    return hasProperties.remove(newHasProperties);
  }
  public void setId (int a_id) {
      if (a_id> -1) {
        id = a_id;
        PropertySetManager.getInstance().putInCache(this);
      }
  }

  /* to support remove operation on collections, java objs are equal if id match */
  public boolean equals(Object o) {
    if (!(o instanceof PropertySet)) //covers o == null case
      return false;
    PropertySet other = (PropertySet)o;
    if (this == other)
      return true;
    else
      return other.id == id;
  }

  /* to maintain hashCode contract */
  public int hashCode() {
    if (id == -1) {
      if (isPersistant()) {
        id = Workspace.makeGuid();
      } else {
        id = Workspace.nextId();
      }
    }
    return id;
  }

/** method to marshall data from caching layer object to JSON **/
  public JSONObject asJSON () {
    JSONObject jsonObj = new JSONObject();
    try {
      jsonObj.put("class", "PropertySet");
      jsonObj.put("id", id);
       if (getHasProperties() != null) {
         String HasPropertiesAsString = "";
         for (Property HasPropertiesitem: getHasProperties()) {
           HasPropertiesAsString += HasPropertiesitem.getId() + ",";
           HasPropertiesAsString.replaceFirst(",$", "");
         }
         jsonObj.put("hasProperties", HasPropertiesAsString);
       }
      jsonObj.put("id", getId());
    } catch (Exception e1) {
      logWriter.error("Error in marshalling to JSON ", e1);
    }
    return jsonObj;
  }


/** method to marshall data from caching layer object to JSON **/
  public JSONObject asJSONTree () {
    ConcurrentHashMap <DomainConcept, DomainConcept> written = new ConcurrentHashMap<DomainConcept, DomainConcept> ();
    return asJSONTreeAux(written);
  }
  public JSONObject asJSONTreeAux (ConcurrentHashMap<DomainConcept, DomainConcept> written) {
    JSONObject jsonObj = new JSONObject();
    try {
      jsonObj.put("class", "PropertySet");
      jsonObj.put("id", id);
      if (written.contains(this)) {
        return jsonObj;
      }
      written.put(this, this);
       if (getHasProperties() != null) {
         String HasPropertiesAsString = "";
         for (Property HasPropertiesitem: getHasProperties()) {
           HasPropertiesAsString += HasPropertiesitem.getId() + ",";
           HasPropertiesAsString.replaceFirst(",$", "");
         }
         jsonObj.put("hasProperties", HasPropertiesAsString);
       }
      jsonObj.put("id", getId());
      written.remove(this);
    } catch (Exception e1) {
      logWriter.error("Error in marshalling to JSON ", e1);
    }
    return jsonObj;
  }


/** method to update data in caching layer object from JSON **/
  public boolean updateFromJSON (JSONObject jsonObj) {
    try {
      if (!jsonObj.isNull("hasProperties")) {
      String [] hasPropertiesAsStrings = jsonObj.optString("hasProperties").split(",");
      ArrayList<Property> hasPropertiesValues = new ArrayList<Property>(hasPropertiesAsStrings.length);
      for (String hasPropertiesItemId: hasPropertiesAsStrings) {
      if (hasPropertiesItemId != null && PropertyManager.getInstance().get(Integer.parseInt(hasPropertiesItemId)) != null) {
          hasPropertiesValues.add(PropertyManager.getInstance().get(Integer.parseInt(hasPropertiesItemId)));
        }
      }
      hasProperties = hasPropertiesValues;
      }
    } catch (Exception e) {
      logWriter.error("Failure updating from JSON", e);
      return false;
    }
    return true;
  }

}
