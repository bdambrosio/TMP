/* generated by writeJava methods in Workspace */
package com.Tuuyi.TMPDataModel.generatedClasses.TMPDataModel;

import com.Tuuyi.TDM.*;
import org.apache.log4j.Logger;
import java.util.*;
import java.lang.reflect.Method;
import org.json.*;
import java.util.concurrent.ConcurrentHashMap;

public class OntologyRelation extends DomainConcept {

  protected static final Logger logWriter = Logger.getLogger(OntologyRelation.class.getName());
  private static final boolean persistant = false;

  public void inMemoryOnly(boolean local) {inMemoryOnly = local;}
  public boolean getInMemoryOnly() {return inMemoryOnly;}
  public boolean isPersistant() {return persistant;}

  public static boolean isPersistantClass() {return persistant;}

  protected OntologyTerm hasArg2 = null;

  String relation;
  protected OntologyTerm hasArg1 = null;


  /** if no arg, assume from db **/
  public OntologyRelation() {
    this(true);
  }
  /** if from DB, set nonFunctional slot wrappers to stub **/
  /**    so subsequent slot get will do retrieval         **/
  public OntologyRelation(boolean fromDB) {
    super(Workspace.getCurrentWorkspace(), fromDB);
  }
  public OntologyRelation(Workspace workspace, boolean fromDB) {
    super(workspace, fromDB);
  }
  public int getId() {
    return id;
  }
  public boolean HasArg2IsResident() {
      return true;
  }
  public OntologyTerm getHasArg2() {

    return hasArg2;
  }
  public int getHasArg2InternalId() {
    if (hasArg2 == null) {
      return -1;
    } else { 
      return hasArg2.getId();
    }
  }
  public String getRelation() {
    return relation;
  }
  public boolean HasArg1IsResident() {
      return true;
  }
  public OntologyTerm getHasArg1() {

    return hasArg1;
  }
  public int getHasArg1InternalId() {
    if (hasArg1 == null) {
      return -1;
    } else { 
      return hasArg1.getId();
    }
  }
  public void setId (int a_id) {
      if (a_id> -1) {
        id = a_id;
      }
  }

  public void setHasArg2(OntologyTerm newHasArg2) {
    hasArg2 = newHasArg2;
  }
  public void setRelation (String a_relation) {
    relation = a_relation;
  }

  public void setHasArg1(OntologyTerm newHasArg1) {
    hasArg1 = newHasArg1;
  }

  /* to support remove operation on collections, java objs are equal if id match */
  public boolean equals(Object o) {
    if (!(o instanceof OntologyRelation)) //covers o == null case
      return false;
    OntologyRelation other = (OntologyRelation)o;
    if (this == other)
      return true;
    else
      return other.id == id;
  }

  /* to maintain hashCode contract */
  public int hashCode() {
    if (id == -1) {
      if (isPersistant()) {
        id = Workspace.makeGuid();
      } else {
        id = Workspace.nextId();
      }
    }
    return id;
  }

/** method to marshall data from caching layer object to JSON **/
  public JSONObject asJSON () {
    JSONObject jsonObj = new JSONObject();
    try {
      jsonObj.put("class", "OntologyRelation");
      jsonObj.put("id", id);
      jsonObj.put("id", getId());
      if (getHasArg2() != null) {
        jsonObj.put("hasArg2", getHasArg2().getId());
      }
      jsonObj.put("relation", getRelation());
      if (getHasArg1() != null) {
        jsonObj.put("hasArg1", getHasArg1().getId());
      }
    } catch (Exception e1) {
      logWriter.error("Error in marshalling to JSON ", e1);
    }
    return jsonObj;
  }


/** method to marshall data from caching layer object to JSON **/
  public JSONObject asJSONTree () {
    ConcurrentHashMap <DomainConcept, DomainConcept> written = new ConcurrentHashMap<DomainConcept, DomainConcept> ();
    return asJSONTreeAux(written);
  }
  public JSONObject asJSONTreeAux (ConcurrentHashMap<DomainConcept, DomainConcept> written) {
    JSONObject jsonObj = new JSONObject();
    try {
      jsonObj.put("class", "OntologyRelation");
      jsonObj.put("id", id);
      if (written.contains(this)) {
        return jsonObj;
      }
      written.put(this, this);
      jsonObj.put("id", getId());
      if (getHasArg2() != null) {
        jsonObj.put("hasArg2", getHasArg2().asJSONTreeAux(written));
      }
      jsonObj.put("relation", getRelation());
      if (getHasArg1() != null) {
        jsonObj.put("hasArg1", getHasArg1().asJSONTreeAux(written));
      }
      written.remove(this);
    } catch (Exception e1) {
      logWriter.error("Error in marshalling to JSON ", e1);
    }
    return jsonObj;
  }


/** method to update data in caching layer object from JSON **/
  public boolean updateFromJSON (JSONObject jsonObj) {
    try {
      if (!jsonObj.isNull("hasArg2")) {
        int hasArg2Id = jsonObj.optInt("hasArg2");
        OntologyTerm value = OntologyTermManager.getInstance().get(hasArg2Id);
        if(value != null) {
            setHasArg2(value);
        }
      }
      if (!jsonObj.isNull("relation")) {
        setRelation(jsonObj.optString("relation"));
      }
      if (!jsonObj.isNull("hasArg1")) {
        int hasArg1Id = jsonObj.optInt("hasArg1");
        OntologyTerm value = OntologyTermManager.getInstance().get(hasArg1Id);
        if(value != null) {
            setHasArg1(value);
        }
      }
    } catch (Exception e) {
      logWriter.error("Failure updating from JSON", e);
      return false;
    }
    return true;
  }


  public static final String TYPE_RELATION = "TYPE_RELATION";
  public static final String GENERALIZATION_RELATION = "GENERALIZATION_RELATION";
  
  public OntologyRelation (String relationType, OntologyTerm arg1, OntologyTerm arg2) {
    this.setHasArg2(arg2);
    this.setRelation(relationType);
    this.setHasArg1(arg1);
    this.setHasArg2(arg2);
    arg1.add1AsArg1In(this);
    arg2.add1AsArg2In(this);
  }
  
  public String toString() {
    return relation+"("+getHasArg1().getHasValue()+","+getHasArg2().getHasValue()+")";
  }
}
