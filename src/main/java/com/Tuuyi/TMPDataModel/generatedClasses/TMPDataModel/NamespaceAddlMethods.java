/* generated by writeJava methods in Workspace */
package com.Tuuyi.TMPDataModel.generatedClasses.TMPDataModel;

//import - causes next line to be included in base class
import com.Tuuyi.TDM.*;
import com.Tuuyi.TMPDataModel.generatedClasses.TMPDataModel.InstanceSparseGraph.InstanceGraphInstance;

import org.apache.log4j.Logger;

import java.util.*;
import java.lang.reflect.Method;

import org.json.*;

import java.util.concurrent.ConcurrentHashMap;

public class NamespaceAddlMethods extends Namespace {

  protected HashMap <String, DynamicCount> namespace = new HashMap<String, DynamicCount> (10000);
  protected double weightedItemCountSum = 0;
  protected long rawItemCountSum = 0;
  long lastDate = 0;
  long firstDate = Long.MAX_VALUE;  
  
  public void clearPriors() {
    namespace.clear();
  }
  
    public void setMarginalCnt(String item, DynamicCount cnt) {
    namespace.put(item,  cnt);
  }
  
  public DynamicCount getMarginalCnt(String item) {
    return namespace.get(item);
  }
  
  public Collection<DynamicCount> getMarginalCnts() {
    return namespace.values();
  }
  
  public Set<Map.Entry<String, DynamicCount>> getMarginalCntsEntrySet() {
    return namespace.entrySet();
  }
  
  public void setWeightedItemCountSum(double cnt) {
    weightedItemCountSum = cnt;
  }
  
  public void setRawItemCountSum(long cnt) {
    rawItemCountSum = cnt;
  }
  
  public double getDefaultWeightedPrior() {
    return 1.0/(namespace.size()+1);
  }

  public double getWeightedPrior(String token) {
    DynamicCount dc = namespace.get(token);
    if (dc != null) {
      return dc.getMarginal();
    } else {
      return 1.0/(namespace.size()+1);
    }
  }

  public void incrWeightedItemCountSum(double cnt) {
    weightedItemCountSum += cnt;
  }
  
  public void incrRawItemCountSum(long cnt) {
    rawItemCountSum += cnt;
  }

  public double getWeightedItemCountSum() {
    return weightedItemCountSum;
  }
  
  public long getRawItemCountSum() {
    return rawItemCountSum;
  }
  
  public Set<String> getTokenSet() {
    return namespace.keySet();
  }
  public int getTokenSetSize() {
    return namespace.size();
  }
  
  protected void incrMarginalCount(InstanceSparseGraph.InstanceGraphInstance e) {
    //incrWeightedItemCountSum(e.getWeight());
    //incrRawItemCountSum(1);
    if (e != null) {
      DynamicCount cnt = getMarginalCnt(e.getItem());
      if (cnt != null) {
        //cnt.incr(e.getWeight(), e.date);
        cnt.incr(1.0, e.date);
        return;
      } else {
        //cnt = new DynamicCount(e.date, e.getWeight());
        cnt = new DynamicCount(e.date, 1.0);
        namespace.put(e.getItem(), cnt);
      }
    }
  }
  
  protected void incrEventCount(double weight) {
    incrWeightedItemCountSum(weight);
    incrRawItemCountSum(1);
  }
  
   public long getSingletonTokenCount() {
     int count = 0;
     for (String token: namespace.keySet()) {
         count++;
     }
     return count;
   }

   public long getInteractionTokenCount() {
     int count = 0;
     for (String token: namespace.keySet()) {
         count++;
     }
     return count;
  }


//DL  public class DynamicCount {
//DL    long rawCount;
//DL    long birthday;
//DL    double weightedCount;
//DL    //double velocity; // recent prob
//DL    //double lastWeightedItemCountSum; // last seen
    
//DL   public DynamicCount (long aBirthday, double weightedCount) {
//DL      birthday = aBirthday;
//DL      this.weightedCount = weightedCount;
//DL      rawCount = 1;
//DL      if (aBirthday > lastDate) {
//DL        lastDate = aBirthday;
//DL      }
//DL      if (aBirthday < firstDate) {
//DL        firstDate = aBirthday;
//DL      }
//DL    }
    
//DL    public double eventSpaceFraction() {
//DL      return Math.sqrt(Math.max(0.02, (1.0*(lastDate-birthday+1))/(lastDate-firstDate+1))); //because weightedCounts are sqrt aged
//DL    }
    
//DL    public double rawEventSpaceFraction() {
//DL      return Math.sqrt((1.0*(lastDate-birthday+1))/(lastDate-firstDate+1)); //because weightedCounts are sqrt aged
//DL    }
    
//DL    public double getMarginal() {
//DL      double eventSpaceFraction = eventSpaceFraction();
//DL     double marginal =  weightedCount/(weightedItemCountSum*eventSpaceFraction);
//DL     return marginal;
//DL    }
        
//DL    public DynamicCount(JSONObject json) {
//DL      try {
//DL        birthday = json.getLong("bday");
//DL        weightedCount = json.getDouble("wc");
//DL        rawCount = json.getLong("rc");
//DL      } catch (Exception e) {
//DL        logWriter.error("failure getting DynamicCount from json", e);
//DL      }
//DL    }
    
//DL    public JSONObject toJSON () {
//DL      JSONObject json = new JSONObject();
//DL      try {
//DL        json.put("bday", birthday);
//DL        json.put("wc", weightedCount);
//DL        json.put("rc", rawCount);
//DL      } catch (Exception e) {
//DL        logWriter.error("Failure coercing to json", e);
//DL      }
//DL      return json;
//DL    }
    
//DL    public void incr(double incr, long bday) {
//DL      weightedCount += incr;
//DL      rawCount++;
//DL      if (bday > lastDate) {
//DL        lastDate = bday;
//DL      }
//DL     if (bday < birthday) {
//DL        birthday = bday;
//DL        if (bday < firstDate) {
//DL          firstDate = bday;
//DL        }
//DL      }
//DL    }
//DL    public String toString() {
//DL      int tmp = (int)Math.floor(weightedCount*10);
//DL      return "{"+rawCount+","+tmp/10.0+"]";
//DL    }
//DL  }

}
