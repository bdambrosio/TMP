/* generated by writeJava methods in Workspace */
package com.Tuuyi.TMPDataModel.generatedClasses.TMPDataModel;

import com.Tuuyi.TDM.*;
import org.apache.log4j.Logger;
import java.util.*;
import java.lang.reflect.Method;
import org.json.*;
import java.util.concurrent.ConcurrentHashMap;

public class HierarchicalNode extends  Node {

  protected static final Logger logWriter = Logger.getLogger(HierarchicalNode.class.getName());
  private static final boolean persistant = false;

  public void inMemoryOnly(boolean local) {inMemoryOnly = local;}
  public boolean getInMemoryOnly() {return inMemoryOnly;}
  public boolean isPersistant() {return persistant;}

  public static boolean isPersistantClass() {return persistant;}

  int [] pathFromRoot;
  protected HierarchicalNode parent = null;

  int [] remainingSpan;
  protected ArrayList<HierarchicalNode> down = new ArrayList<HierarchicalNode>(0);

  public void setDownRawValueInternal(String rawVal) {
  }


  /** if no arg, assume from db **/
  public HierarchicalNode() {
    this(true);
  }
  /** if from DB, set nonFunctional slot wrappers to stub **/
  /**    so subsequent slot get will do retrieval         **/
  public HierarchicalNode(boolean fromDB) {
    super(Workspace.getCurrentWorkspace(), fromDB);
  }
  public HierarchicalNode(Workspace workspace, boolean fromDB) {
    super(workspace, fromDB);
  }
  public int [] getPathFromRoot() {
    return pathFromRoot;
  }
  public boolean ParentIsResident() {
      return true;
  }
  public HierarchicalNode getParent() {

    return parent;
  }
  public int getParentInternalId() {
    if (parent == null) {
      return -1;
    } else { 
      return parent.getId();
    }
  }
  public int [] getRemainingSpan() {
    return remainingSpan;
  }
  public boolean downAllResident() {
      return true;
  }

  /** returns true if this object contains the given object without accessing the database **/
  public boolean containsDown(HierarchicalNode value) {
      return down.contains(value);
  }

  public ArrayList<HierarchicalNode> getDown() {
      return down;
  }
  public void setPathFromRoot (int [] a_pathFromRoot) {
    pathFromRoot = a_pathFromRoot;
  }

  public void setParent(HierarchicalNode newParent) {
    parent = newParent;
  }
  public void setRemainingSpan (int [] a_remainingSpan) {
    remainingSpan = a_remainingSpan;
  }

  /** note that this method does not check for duplicates, which may cause a DB error */
  public void setDown(Collection<HierarchicalNode> newDown) {
    down=new ArrayList<HierarchicalNode>(newDown);
  }

  public void add1Down(HierarchicalNode newDown) {
    down.add(newDown);
  }

  /** note that this method does not check for duplicates, which may cause a DB error */
  public void addAllDown(Collection<HierarchicalNode> newDown) {
    down.addAll(newDown);
  }

  public boolean remove1Down(HierarchicalNode newDown) {
    return down.remove(newDown);
  }

  /* to support remove operation on collections, java objs are equal if id match */
  public boolean equals(Object o) {
    if (!(o instanceof HierarchicalNode)) //covers o == null case
      return false;
    HierarchicalNode other = (HierarchicalNode)o;
    if (this == other)
      return true;
    else
      return other.id == id;
  }

  /* to maintain hashCode contract */
  public int hashCode() {
    if (id == -1) {
      if (isPersistant()) {
        id = Workspace.makeGuid();
      } else {
        id = Workspace.nextId();
      }
    }
    return id;
  }

/** method to marshall data from caching layer object to JSON **/
  public JSONObject asJSON () {
    JSONObject jsonObj = new JSONObject();
    try {
      jsonObj.put("class", "HierarchicalNode");
      jsonObj.put("id", id);
      if (getPathFromRoot() != null) {
        JSONArray pathFromRootArray = new JSONArray();
        for (int item : getPathFromRoot()) {
          pathFromRootArray.put(item);
        }
        jsonObj.put("pathFromRoot", pathFromRootArray);
      }
      if (getParent() != null) {
        jsonObj.put("parent", getParent().getId());
      }
      if (getRemainingSpan() != null) {
        JSONArray remainingSpanArray = new JSONArray();
        for (int item : getRemainingSpan()) {
          remainingSpanArray.put(item);
        }
        jsonObj.put("remainingSpan", remainingSpanArray);
      }
       if (getDown() != null) {
         String DownAsString = "";
         for (HierarchicalNode Downitem: getDown()) {
           DownAsString += Downitem.getId() + ",";
           DownAsString.replaceFirst(",$", "");
         }
         jsonObj.put("down", DownAsString);
       }
      jsonObj.put("order", getOrder());
       if (getHasDistributions() != null) {
         String HasDistributionsAsString = "";
         for (Distribution HasDistributionsitem: getHasDistributions()) {
           HasDistributionsAsString += HasDistributionsitem.getId() + ",";
           HasDistributionsAsString.replaceFirst(",$", "");
         }
         jsonObj.put("hasDistributions", HasDistributionsAsString);
       }
       if (getCachedLambdas() != null) {
         String CachedLambdasAsString = "";
         for (Distribution CachedLambdasitem: getCachedLambdas()) {
           CachedLambdasAsString += CachedLambdasitem.getId() + ",";
           CachedLambdasAsString.replaceFirst(",$", "");
         }
         jsonObj.put("CachedLambdas", CachedLambdasAsString);
       }
      if (getDomain() != null) {
        JSONArray domainArray = new JSONArray();
        for (String  item : getDomain()) {
          domainArray.put(item);
        }
        jsonObj.put("domain", domainArray);
      }
      if (getCachedPi() != null) {
        jsonObj.put("cachedPi", getCachedPi().getId());
      }
      jsonObj.put("id", getId());
      if (getCachedPosterior() != null) {
        jsonObj.put("cachedPosterior", getCachedPosterior().getId());
      }
      jsonObj.put("evidence", getEvidence());
       if (getModel() != null) {
         String ModelAsString = "";
         for (Distribution Modelitem: getModel()) {
           ModelAsString += Modelitem.getId() + ",";
           ModelAsString.replaceFirst(",$", "");
         }
         jsonObj.put("model", ModelAsString);
       }
      jsonObj.put("hasName", getHasName());
    } catch (Exception e1) {
      logWriter.error("Error in marshalling to JSON ", e1);
    }
    return jsonObj;
  }


/** method to marshall data from caching layer object to JSON **/
  public JSONObject asJSONTree () {
    ConcurrentHashMap <DomainConcept, DomainConcept> written = new ConcurrentHashMap<DomainConcept, DomainConcept> ();
    return asJSONTreeAux(written);
  }
  public JSONObject asJSONTreeAux (ConcurrentHashMap<DomainConcept, DomainConcept> written) {
    JSONObject jsonObj = new JSONObject();
    try {
      jsonObj.put("class", "HierarchicalNode");
      jsonObj.put("id", id);
      if (written.contains(this)) {
        return jsonObj;
      }
      written.put(this, this);
      if (getPathFromRoot() != null) {
        JSONArray pathFromRootArray = new JSONArray();
        for (int item : getPathFromRoot()) {
          pathFromRootArray.put(item);
        }
        jsonObj.put("pathFromRoot", pathFromRootArray);
      }
      if (getParent() != null) {
        jsonObj.put("parent", getParent().asJSONTreeAux(written));
      }
      if (getRemainingSpan() != null) {
        JSONArray remainingSpanArray = new JSONArray();
        for (int item : getRemainingSpan()) {
          remainingSpanArray.put(item);
        }
        jsonObj.put("remainingSpan", remainingSpanArray);
      }
       if (getDown() != null) {
         String DownAsString = "";
         for (HierarchicalNode Downitem: getDown()) {
           DownAsString += Downitem.getId() + ",";
           DownAsString.replaceFirst(",$", "");
         }
         jsonObj.put("down", DownAsString);
       }
      jsonObj.put("order", getOrder());
       if (getHasDistributions() != null) {
         String HasDistributionsAsString = "";
         for (Distribution HasDistributionsitem: getHasDistributions()) {
           HasDistributionsAsString += HasDistributionsitem.getId() + ",";
           HasDistributionsAsString.replaceFirst(",$", "");
         }
         jsonObj.put("hasDistributions", HasDistributionsAsString);
       }
       if (getCachedLambdas() != null) {
         String CachedLambdasAsString = "";
         for (Distribution CachedLambdasitem: getCachedLambdas()) {
           CachedLambdasAsString += CachedLambdasitem.getId() + ",";
           CachedLambdasAsString.replaceFirst(",$", "");
         }
         jsonObj.put("CachedLambdas", CachedLambdasAsString);
       }
      if (getDomain() != null) {
        JSONArray domainArray = new JSONArray();
        for (String  item : getDomain()) {
          domainArray.put(item);
        }
        jsonObj.put("domain", domainArray);
      }
      if (getCachedPi() != null) {
        jsonObj.put("cachedPi", getCachedPi().asJSONTreeAux(written));
      }
      jsonObj.put("id", getId());
      if (getCachedPosterior() != null) {
        jsonObj.put("cachedPosterior", getCachedPosterior().asJSONTreeAux(written));
      }
      jsonObj.put("evidence", getEvidence());
       if (getModel() != null) {
         String ModelAsString = "";
         for (Distribution Modelitem: getModel()) {
           ModelAsString += Modelitem.getId() + ",";
           ModelAsString.replaceFirst(",$", "");
         }
         jsonObj.put("model", ModelAsString);
       }
      jsonObj.put("hasName", getHasName());
      written.remove(this);
    } catch (Exception e1) {
      logWriter.error("Error in marshalling to JSON ", e1);
    }
    return jsonObj;
  }


/** method to update data in caching layer object from JSON **/
  public boolean updateFromJSON (JSONObject jsonObj) {
    try {
      JSONArray pathFromRootArray = jsonObj.optJSONArray("pathFromRoot");
      if (pathFromRootArray != null) {
        int[] aPathFromRoot = new int[pathFromRootArray.length()];
        for (int i = 0; i < pathFromRootArray.length(); i++) {
          aPathFromRoot[i] = pathFromRootArray.getInt(i);
        }
        setPathFromRoot(aPathFromRoot);
      }
      if (!jsonObj.isNull("parent")) {
        int parentId = jsonObj.optInt("parent");
        HierarchicalNode value = HierarchicalNodeManager.getInstance().get(parentId);
        if(value != null) {
            setParent(value);
        }
      }
      JSONArray remainingSpanArray = jsonObj.optJSONArray("remainingSpan");
      if (remainingSpanArray != null) {
        int[] aRemainingSpan = new int[remainingSpanArray.length()];
        for (int i = 0; i < remainingSpanArray.length(); i++) {
          aRemainingSpan[i] = remainingSpanArray.getInt(i);
        }
        setRemainingSpan(aRemainingSpan);
      }
      if (!jsonObj.isNull("down")) {
      String [] downAsStrings = jsonObj.optString("down").split(",");
      ArrayList<HierarchicalNode> downValues = new ArrayList<HierarchicalNode>(downAsStrings.length);
      for (String downItemId: downAsStrings) {
      if (downItemId != null && HierarchicalNodeManager.getInstance().get(Integer.parseInt(downItemId)) != null) {
          downValues.add(HierarchicalNodeManager.getInstance().get(Integer.parseInt(downItemId)));
        }
      }
      down = downValues;
      }
      if (!jsonObj.isNull("order")) {
        setOrder(jsonObj.optInt("order"));
      }
      if (!jsonObj.isNull("hasDistributions")) {
      String [] hasDistributionsAsStrings = jsonObj.optString("hasDistributions").split(",");
      ArrayList<Distribution> hasDistributionsValues = new ArrayList<Distribution>(hasDistributionsAsStrings.length);
      for (String hasDistributionsItemId: hasDistributionsAsStrings) {
      if (hasDistributionsItemId != null && DistributionManager.getInstance().get(Integer.parseInt(hasDistributionsItemId)) != null) {
          hasDistributionsValues.add(DistributionManager.getInstance().get(Integer.parseInt(hasDistributionsItemId)));
        }
      }
      hasDistributions = hasDistributionsValues;
      }
      if (!jsonObj.isNull("CachedLambdas")) {
      String [] CachedLambdasAsStrings = jsonObj.optString("CachedLambdas").split(",");
      ArrayList<Distribution> CachedLambdasValues = new ArrayList<Distribution>(CachedLambdasAsStrings.length);
      for (String CachedLambdasItemId: CachedLambdasAsStrings) {
      if (CachedLambdasItemId != null && DistributionManager.getInstance().get(Integer.parseInt(CachedLambdasItemId)) != null) {
          CachedLambdasValues.add(DistributionManager.getInstance().get(Integer.parseInt(CachedLambdasItemId)));
        }
      }
      CachedLambdas = CachedLambdasValues;
      }
      JSONArray domainArray = jsonObj.optJSONArray("domain");
      if (domainArray != null) {
        String[] aDomain = new String[domainArray.length()];
        for (int i = 0; i < domainArray.length(); i++) {
          aDomain[i] = domainArray.getString(i);
        }
        setDomain(aDomain);
      }
      if (!jsonObj.isNull("cachedPi")) {
        int cachedPiId = jsonObj.optInt("cachedPi");
        Distribution value = DistributionManager.getInstance().get(cachedPiId);
        if(value != null) {
            setCachedPi(value);
        }
      }
      if (!jsonObj.isNull("cachedPosterior")) {
        int cachedPosteriorId = jsonObj.optInt("cachedPosterior");
        Distribution value = DistributionManager.getInstance().get(cachedPosteriorId);
        if(value != null) {
            setCachedPosterior(value);
        }
      }
      if (!jsonObj.isNull("evidence")) {
        setEvidence(jsonObj.optInt("evidence"));
      }
      if (!jsonObj.isNull("model")) {
      String [] modelAsStrings = jsonObj.optString("model").split(",");
      ArrayList<Distribution> modelValues = new ArrayList<Distribution>(modelAsStrings.length);
      for (String modelItemId: modelAsStrings) {
      if (modelItemId != null && DistributionManager.getInstance().get(Integer.parseInt(modelItemId)) != null) {
          modelValues.add(DistributionManager.getInstance().get(Integer.parseInt(modelItemId)));
        }
      }
      model = modelValues;
      }
      if (!jsonObj.isNull("hasName")) {
        setHasName(jsonObj.optString("hasName"));
      }
    } catch (Exception e) {
      logWriter.error("Failure updating from JSON", e);
      return false;
    }
    return true;
  }

}
