/* generated by writeJava methods in Workspace */
package com.Tuuyi.TMPDataModel.generatedClasses.TMPDataModel;

import com.Tuuyi.TDM.*;
import org.apache.log4j.Logger;
import java.util.*;
import java.lang.reflect.Method;
import org.json.*;
import java.util.concurrent.ConcurrentHashMap;
import com.Tuuyi.TDM.*;

public class Namespace extends DomainConcept {

  protected static final Logger logWriter = Logger.getLogger(Namespace.class.getName());
  private static final boolean persistant = false;

  public void inMemoryOnly(boolean local) {inMemoryOnly = local;}
  public boolean getInMemoryOnly() {return inMemoryOnly;}
  public boolean isPersistant() {return persistant;}

  public static boolean isPersistantClass() {return persistant;}

  protected GraphContext context = null;

  double rawCount;

  /** if no arg, assume from db **/
  public Namespace() {
    this(true);
  }
  /** if from DB, set nonFunctional slot wrappers to stub **/
  /**    so subsequent slot get will do retrieval         **/
  public Namespace(boolean fromDB) {
    super(Workspace.getCurrentWorkspace(), fromDB);
  }
  public Namespace(Workspace workspace, boolean fromDB) {
    super(workspace, fromDB);
  }
  public int getId() {
    return id;
  }
  public boolean ContextIsResident() {
      return true;
  }
  public GraphContext getContext() {

    return context;
  }
  public int getContextInternalId() {
    if (context == null) {
      return -1;
    } else { 
      return context.getId();
    }
  }
  public double getRawCount() {
    return rawCount;
  }
  public void setId (int a_id) {
      if (a_id> -1) {
        id = a_id;
      }
  }

  public void setContext(GraphContext newContext) {
    context = newContext;
  }
  public void setRawCount (double a_rawCount) {
    rawCount = a_rawCount;
  }

  /* to support remove operation on collections, java objs are equal if id match */
  public boolean equals(Object o) {
    if (!(o instanceof Namespace)) //covers o == null case
      return false;
    Namespace other = (Namespace)o;
    if (this == other)
      return true;
    else
      return other.id == id;
  }

  /* to maintain hashCode contract */
  public int hashCode() {
    if (id == -1) {
      if (isPersistant()) {
        id = Workspace.makeGuid();
      } else {
        id = Workspace.nextId();
      }
    }
    return id;
  }

/** method to marshall data from caching layer object to JSON **/
  public JSONObject asJSON () {
    JSONObject jsonObj = new JSONObject();
    try {
      jsonObj.put("class", "Namespace");
      jsonObj.put("id", id);
      jsonObj.put("id", getId());
      if (getContext() != null) {
        jsonObj.put("context", getContext().getId());
      }
      jsonObj.put("rawCount", getRawCount());
    } catch (Exception e1) {
      logWriter.error("Error in marshalling to JSON ", e1);
    }
    return jsonObj;
  }


/** method to marshall data from caching layer object to JSON **/
  public JSONObject asJSONTree () {
    ConcurrentHashMap <DomainConcept, DomainConcept> written = new ConcurrentHashMap<DomainConcept, DomainConcept> ();
    return asJSONTreeAux(written);
  }
  public JSONObject asJSONTreeAux (ConcurrentHashMap<DomainConcept, DomainConcept> written) {
    JSONObject jsonObj = new JSONObject();
    try {
      jsonObj.put("class", "Namespace");
      jsonObj.put("id", id);
      if (written.contains(this)) {
        return jsonObj;
      }
      written.put(this, this);
      jsonObj.put("id", getId());
      if (getContext() != null) {
        jsonObj.put("context", getContext().asJSONTreeAux(written));
      }
      jsonObj.put("rawCount", getRawCount());
      written.remove(this);
    } catch (Exception e1) {
      logWriter.error("Error in marshalling to JSON ", e1);
    }
    return jsonObj;
  }


/** method to update data in caching layer object from JSON **/
  public boolean updateFromJSON (JSONObject jsonObj) {
    try {
      if (!jsonObj.isNull("context")) {
        int contextId = jsonObj.optInt("context");
        GraphContext value = GraphContextManager.getInstance().get(contextId);
        if(value != null) {
            setContext(value);
        }
      }
      if (!jsonObj.isNull("rawCount")) {
        setRawCount(jsonObj.optDouble("rawCount"));
      }
    } catch (Exception e) {
      logWriter.error("Failure updating from JSON", e);
      return false;
    }
    return true;
  }


  protected HashMap <String, DynamicCount> namespace = new HashMap<String, DynamicCount> (10000);
  protected double weightedItemCountSum = 0;
  protected long rawItemCountSum = 0;
  long lastDate = 0;
  long firstDate = Long.MAX_VALUE;  
  
  public void clearPriors() {
    namespace.clear();
  }
  
    public void setMarginalCnt(String item, DynamicCount cnt) {
    namespace.put(item,  cnt);
  }
  
  public DynamicCount getMarginalCnt(String item) {
    return namespace.get(item);
  }
  
  public Collection<DynamicCount> getMarginalCnts() {
    return namespace.values();
  }
  
  public Set<Map.Entry<String, DynamicCount>> getMarginalCntsEntrySet() {
    return namespace.entrySet();
  }
  
  public void setWeightedItemCountSum(double cnt) {
    weightedItemCountSum = cnt;
  }
  
  public void setRawItemCountSum(long cnt) {
    rawItemCountSum = cnt;
  }
  
  public double getDefaultWeightedPrior() {
    return 1.0/(namespace.size()+1);
  }

  public double getWeightedPrior(String token) {
    DynamicCount dc = namespace.get(token);
    if (dc != null) {
      return dc.getMarginal();
    } else {
      return 1.0/(namespace.size()+1);
    }
  }

  public void incrWeightedItemCountSum(double cnt) {
    weightedItemCountSum += cnt;
  }
  
  public void incrRawItemCountSum(long cnt) {
    rawItemCountSum += cnt;
  }

  public double getWeightedItemCountSum() {
    return weightedItemCountSum;
  }
  
  public long getRawItemCountSum() {
    return rawItemCountSum;
  }
  
  public Set<String> getTokenSet() {
    return namespace.keySet();
  }
  public int getTokenSetSize() {
    return namespace.size();
  }
  
  protected void incrMarginalCount(InstanceSparseGraph.InstanceGraphInstance e) {
    //incrWeightedItemCountSum(e.getWeight());
    //incrRawItemCountSum(1);
    if (e != null) {
      DynamicCount cnt = getMarginalCnt(e.getItem());
      if (cnt != null) {
        //cnt.incr(e.getWeight(), e.date);
        cnt.incr(1.0, e.date);
        return;
      } else {
        //cnt = new DynamicCount(e.date, e.getWeight());
        cnt = new DynamicCount(e.date, 1.0);
        namespace.put(e.getItem(), cnt);
      }
    }
  }
  
  protected void incrEventCount(double weight) {
    incrWeightedItemCountSum(weight);
    incrRawItemCountSum(1);
  }
  
   public long getSingletonTokenCount() {
     int count = 0;
     for (String token: namespace.keySet()) {
         count++;
     }
     return count;
   }

   public long getInteractionTokenCount() {
     int count = 0;
     for (String token: namespace.keySet()) {
         count++;
     }
     return count;
  }


  public class DynamicCount {
    long rawCount;
    long birthday;
    double weightedCount;
    //double velocity; // recent prob
    //double lastWeightedItemCountSum; // last seen
    
   public DynamicCount (long aBirthday, double weightedCount) {
      birthday = aBirthday;
      this.weightedCount = weightedCount;
      rawCount = 1;
      if (aBirthday > lastDate) {
        lastDate = aBirthday;
      }
      if (aBirthday < firstDate) {
        firstDate = aBirthday;
      }
    }
    
    public double eventSpaceFraction() {
      return Math.sqrt(Math.max(0.02, (1.0*(lastDate-birthday+1))/(lastDate-firstDate+1))); //because weightedCounts are sqrt aged
    }
    
    public double rawEventSpaceFraction() {
      return Math.sqrt((1.0*(lastDate-birthday+1))/(lastDate-firstDate+1)); //because weightedCounts are sqrt aged
    }
    
    public double getMarginal() {
      double eventSpaceFraction = eventSpaceFraction();
     double marginal =  weightedCount/(weightedItemCountSum*eventSpaceFraction);
     return marginal;
    }
        
    public DynamicCount(JSONObject json) {
      try {
        birthday = json.getLong("bday");
        weightedCount = json.getDouble("wc");
        rawCount = json.getLong("rc");
      } catch (Exception e) {
        logWriter.error("failure getting DynamicCount from json", e);
      }
    }
    
    public JSONObject toJSON () {
      JSONObject json = new JSONObject();
      try {
        json.put("bday", birthday);
        json.put("wc", weightedCount);
        json.put("rc", rawCount);
      } catch (Exception e) {
        logWriter.error("Failure coercing to json", e);
      }
      return json;
    }
    
    public void incr(double incr, long bday) {
      weightedCount += incr;
      rawCount++;
      if (bday > lastDate) {
        lastDate = bday;
      }
     if (bday < birthday) {
        birthday = bday;
        if (bday < firstDate) {
          firstDate = bday;
        }
      }
    }
    public String toString() {
      int tmp = (int)Math.floor(weightedCount*10);
      return "{"+rawCount+","+tmp/10.0+"]";
    }
  }

}
