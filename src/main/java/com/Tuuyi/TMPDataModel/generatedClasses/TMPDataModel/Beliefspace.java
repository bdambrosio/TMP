/* generated by writeJava methods in Workspace */
package com.Tuuyi.TMPDataModel.generatedClasses.TMPDataModel;

import com.Tuuyi.TDM.*;
import org.apache.log4j.Logger;
import java.util.*;
import java.lang.reflect.Method;
import org.json.*;
import java.util.concurrent.ConcurrentHashMap;
import com.Tuuyi.TDM.*;
import com.Tuuyi.TMPDataModel.generatedClasses.TMPDataModel.Namespace.DynamicCount;

public class Beliefspace extends DomainConcept {

  protected static final Logger logWriter = Logger.getLogger(Beliefspace.class.getName());
  private static final boolean persistant = false;

  public void inMemoryOnly(boolean local) {inMemoryOnly = local;}
  public boolean getInMemoryOnly() {return inMemoryOnly;}
  public boolean isPersistant() {return persistant;}

  public static boolean isPersistantClass() {return persistant;}

  protected Namespace namespace = null;


  /** if no arg, assume from db **/
  public Beliefspace() {
    this(true);
  }
  /** if from DB, set nonFunctional slot wrappers to stub **/
  /**    so subsequent slot get will do retrieval         **/
  public Beliefspace(boolean fromDB) {
    super(Workspace.getCurrentWorkspace(), fromDB);
  }
  public Beliefspace(Workspace workspace, boolean fromDB) {
    super(workspace, fromDB);
  }
  public boolean NamespaceIsResident() {
      return true;
  }
  public Namespace getNamespace() {

    return namespace;
  }
  public int getNamespaceInternalId() {
    if (namespace == null) {
      return -1;
    } else { 
      return namespace.getId();
    }
  }

  public void setNamespace(Namespace newNamespace) {
    namespace = newNamespace;
  }

  /* to support remove operation on collections, java objs are equal if id match */
  public boolean equals(Object o) {
    if (!(o instanceof Beliefspace)) //covers o == null case
      return false;
    Beliefspace other = (Beliefspace)o;
    if (this == other)
      return true;
    else
      return other.id == id;
  }

  /* to maintain hashCode contract */
  public int hashCode() {
    if (id == -1) {
      if (isPersistant()) {
        id = Workspace.makeGuid();
      } else {
        id = Workspace.nextId();
      }
    }
    return id;
  }

/** method to marshall data from caching layer object to JSON **/
  public JSONObject asJSON () {
    JSONObject jsonObj = new JSONObject();
    try {
      jsonObj.put("class", "Beliefspace");
      jsonObj.put("id", id);
      if (getNamespace() != null) {
        jsonObj.put("namespace", getNamespace().getId());
      }
    } catch (Exception e1) {
      logWriter.error("Error in marshalling to JSON ", e1);
    }
    return jsonObj;
  }


/** method to marshall data from caching layer object to JSON **/
  public JSONObject asJSONTree () {
    ConcurrentHashMap <DomainConcept, DomainConcept> written = new ConcurrentHashMap<DomainConcept, DomainConcept> ();
    return asJSONTreeAux(written);
  }
  public JSONObject asJSONTreeAux (ConcurrentHashMap<DomainConcept, DomainConcept> written) {
    JSONObject jsonObj = new JSONObject();
    try {
      jsonObj.put("class", "Beliefspace");
      jsonObj.put("id", id);
      if (written.contains(this)) {
        return jsonObj;
      }
      written.put(this, this);
      if (getNamespace() != null) {
        jsonObj.put("namespace", getNamespace().asJSONTreeAux(written));
      }
      written.remove(this);
    } catch (Exception e1) {
      logWriter.error("Error in marshalling to JSON ", e1);
    }
    return jsonObj;
  }


/** method to update data in caching layer object from JSON **/
  public boolean updateFromJSON (JSONObject jsonObj) {
    try {
      if (!jsonObj.isNull("namespace")) {
        int namespaceId = jsonObj.optInt("namespace");
        Namespace value = NamespaceManager.getInstance().get(namespaceId);
        if(value != null) {
            setNamespace(value);
        }
      }
    } catch (Exception e) {
      logWriter.error("Failure updating from JSON", e);
      return false;
    }
    return true;
  }


    private HashMap<String, MapReduceItem> beliefs = new HashMap<String, MapReduceItem> ();
    public MapReduceItem getMRI(String token) {
      if (beliefs.get(token) != null) {
        return beliefs.get(token);
      } else {
        MapReduceItem mri = new MapReduceItem();
        mri.setItem(token);
        DynamicCount itemCnt = namespace.getMarginalCnt(token);
        if (itemCnt != null) {
          mri.setScore(itemCnt.getMarginal());
        }else {
          mri.setScore(1.0/(Math.max(1000.0,namespace.weightedItemCountSum)+1));
        }
        beliefs.put(token,  mri);
        return mri;
      }
    }
    
    public MapReduceItem setMRI(String token, MapReduceItem mri) {
      return beliefs.put(token, mri);
    }
    
    public Collection<MapReduceItem> getKnownMRIs() {
      return beliefs.values();
    }
    
}
